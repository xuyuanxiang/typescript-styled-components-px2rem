// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`e2e should transform runtime 1`] = `
Object {
  "diagnostics": Array [],
  "outputText": "import styled, { css, createGlobalStyle, keyframes } from 'styled-components';
const mixins = css \`
  padding: 0 0.16rem;
  margin: 0.16rem 0.32rem 0.16rem 0.32rem;
\`;
const Animation = keyframes \`
  from {
    transform: translateX(1rem);
  }

  to {
    transform: translateX(-1rem);
  }
\`;
export const Input = styled.input.attrs(props => ({
    type: 'password',
    size: props.size || '16px',
    width: props.width || 100,
})) \`
  color: palevioletred;
  font-size: 0.14rem;
  border: 1px solid palevioletred;
  border-radius: 0.08rem;
  width: \${props => px2rem_1(px2rem_1(props.width))};
  padding: \${props => props.size};
\`;
const fontSize = 18;
export const GlobalStyle = createGlobalStyle \`
  html body {
    font-size: \${px2rem_1(fontSize)};
    width: 10.24rem;
    min-height: 8rem;
  }
\`;
function getHeight() {
    const height = 100;
    return height / 2;
}
export const MixinsButton = styled.button \`
  \${mixins};
  display: block;
  width: 100%;
  height: \${px2rem_1(getHeight())};
  line-height: 0.32rem;
\`;
const lineHeight = '44';
export const LineHeightButton = styled.button \`
  width: \${(props) => px2rem_1(() => {
    if (props.width) {
        return props.width;
    }
    else {
        return 0;
    }
})};
  line-height: \${px2rem_1(lineHeight)};
\`;
export const StyledButton = styled.button \`
  width: 1.2rem;
  height: 0.32rem;
  font-size: 0.14rem;
\`;
export const ExtendButton = styled(StyledButton) \`
  padding: \${props => px2rem_1(px2rem_1(props.padding))};
\`;
export const SizeableButton = styled.button(props => \`
  display: inline;
  width: \${px2rem_1(props.width)};
  height: \${props.height};
  font-size: 0.16rem;
\`);
export const ThemeConsumer = styled.div \`
  font-size: \${props => px2rem_1(px2rem_1(props.theme.fontSize))};
  color: \${props => props.theme.color};
\`;
export const ConditionalExpressionButton = function ({ fontSize }) {
    const StyledButton = styled.button \`
    font-size: \${typeof fontSize === 'number' ? px2rem_1(fontSize) : props => { var _a; return px2rem_1(px2rem_1((_a = props) === null || _a === void 0 ? void 0 : _a.theme.globalFontSize)); }};
  \`;
    return />;;
};
export const Foo = (function () { }) \`
foo
\`;
const Bar = [].foo \`
 bar
\`;
const icon = true;
const BinaryExpression = styled.button \`
  width: 1rem;
  \${icon &&
    \`background-position: 0.09rem center;background-repeat: no-repeat;
     background-size: 0.09rem 0.15rem;
     background-image: url(\\"\${typeof icon === 'string' ? icon : theme === 'dark' ? iconLight : iconDark}\\");
     padding-left: 0.25rem;
  \`}
\`;
const Styled = styled.button \`
  width: 1rem;
  \${props => props.disabled &&
    \`
     background-position: 9px center;
     background-repeat: no-repeat;
     padding-left: 25px;
  \`}
\`;
function px2rem_1(input, ...args) { if (typeof input === \\"function\\")
    return px2rem_1(input(...args)); var value = parseFloat(input); var pixels = Number.isNaN(value) ? 0 : value; if (pixels < 2)
    return \`\${pixels}px\`; var multiplier = Math.pow(10, 5 + 1); var wholeNumber = Math.floor((pixels * 1) / 100 * multiplier); return \`\${(Math.round(wholeNumber / 10) * 10) / multiplier}rem\`; }
",
  "sourceMapText": undefined,
}
`;

exports[`e2e should work 1`] = `
Object {
  "diagnostics": Array [],
  "outputText": "import styled, { css, createGlobalStyle, keyframes } from 'styled-components';
const mixins = css \`
  padding: 0 0.16rem;
  margin: 0.16rem 0.32rem 0.16rem 0.32rem;
\`;
const Animation = keyframes \`
  from {
    transform: translateX(1rem);
  }

  to {
    transform: translateX(-1rem);
  }
\`;
export const Input = styled.input.attrs(props => ({
    type: 'password',
    size: props.size || '16px',
    width: props.width || 100,
})) \`
  color: palevioletred;
  font-size: 0.14rem;
  border: 1px solid palevioletred;
  border-radius: 0.08rem;
  width: \${props => props.width}px;
  padding: \${props => props.size};
\`;
const fontSize = 18;
export const GlobalStyle = createGlobalStyle \`
  html body {
    font-size: \${fontSize}px;
    width: 10.24rem;
    min-height: 8rem;
  }
\`;
function getHeight() {
    const height = 100;
    return height / 2;
}
export const MixinsButton = styled.button \`
  \${mixins};
  display: block;
  width: 100%;
  height: \${getHeight()}px;
  line-height: 0.32rem;
\`;
const lineHeight = '44';
export const LineHeightButton = styled.button \`
  width: \${props => {
    if (props.width) {
        return props.width;
    }
    else {
        return 0;
    }
}}px;
  line-height: \${lineHeight}px;
\`;
export const StyledButton = styled.button \`
  width: 1.2rem;
  height: 0.32rem;
  font-size: 0.14rem;
\`;
export const ExtendButton = styled(StyledButton) \`
  padding: \${props => props.padding}px;
\`;
export const SizeableButton = styled.button(props => \`
  display: inline;
  width: \${props.width}px;
  height: \${props.height};
  font-size: 0.16rem;
\`);
export const ThemeConsumer = styled.div \`
  font-size: \${props => props.theme.fontSize}px;
  color: \${props => props.theme.color};
\`;
export const ConditionalExpressionButton = function ({ fontSize }) {
    const StyledButton = styled.button \`
    font-size: \${typeof fontSize === 'number' ? fontSize : props => { var _a; return (_a = props) === null || _a === void 0 ? void 0 : _a.theme.globalFontSize; }}px;
  \`;
    return />;;
};
export const Foo = (function () { }) \`
foo
\`;
const Bar = [].foo \`
 bar
\`;
const icon = true;
const BinaryExpression = styled.button \`
  width: 1rem;
  \${icon &&
    \`background-position: 0.09rem center;background-repeat: no-repeat;
     background-size: 0.09rem 0.15rem;
     background-image: url(\\"\${typeof icon === 'string' ? icon : theme === 'dark' ? iconLight : iconDark}\\");
     padding-left: 0.25rem;
  \`}
\`;
const Styled = styled.button \`
  width: 1rem;
  \${props => props.disabled &&
    \`
     background-position: 9px center;
     background-repeat: no-repeat;
     padding-left: 25px;
  \`}
\`;
",
  "sourceMapText": undefined,
}
`;
